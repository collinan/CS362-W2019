        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Filename: randomtestcard1.c
        -:    2://Testing: village card
        -:    3://Description: 
        -:    4:#include "dominion.h"
        -:    5:#include "rngs.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:#include <stdio.h>
        -:   10:#include <time.h>
        -:   11:
        -:   12:#define NUMTESTS 50
        -:   13:#define NUMPLAYERS 2 //game rules state players can be between 2 and 4, and since adventurer_funt does
        -:   14://not deal with setting up players we can fix number of players
        -:   15:
        -:   16:
        1:   17:int main(){
        -:   18:	struct gameState G;
        1:   19:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   20:           sea_hag, tribute, smithy};
        -:   21:
        1:   22:	srand(time(0));	
        -:   23:	//set seed to a number larger that 0, so no user input is expected.
        1:   24:	long seed = rand();
        -:   25:	
        -:   26:	unsigned int num_cards_add_to_playerdeck;
        -:   27:	int who;
        -:   28:	
        1:   29:	int testpass=0;
        1:   30:	int testfail=0; 
        -:   31:	
        -:   32:	int initial_handCount;
        -:   33:	int initial_deckCount;
        -:   34:	int initial_discardCount;
        -:   35:	int initial_numActions;
        1:   36:	int addaction_fail=0;
        1:   37:	int add_rm_card_fail=0;
        -:   38:	int p,i;
        -:   39:	int card;
       51:   40:for(p=0;p<NUMTESTS;p++){
        -:   41://initialize the Game
       50:   42:if (initializeGame(NUMPLAYERS, k, seed, &G) != 0){
    #####:   43:printf("Error initializing game.\n");
    #####:   44:exit(1);	
        -:   45:}
        -:   46:
       50:   47:num_cards_add_to_playerdeck=rand()%501;
       50:   48:who=G.whoseTurn;
        -:   49:
        -:   50://printf("Adding %d cards to players hand\n",num_cards_add_to_playerdeck);
    14184:   51:for(i=0;i<num_cards_add_to_playerdeck;i++){
        -:   52:		
    14134:   53:		card=rand()%13;
    14134:   54:	switch(card){
        -:   55:		case 0:
     1114:   56:				gainCard(adventurer,&G,1,who);
     1114:   57:				break;
        -:   58:		case 1:
     1128:   59:				gainCard(gardens,&G,1,who);
     1128:   60:				break;
        -:   61:		case 2:
     1044:   62:				gainCard(embargo,&G,1,who);
     1044:   63:				break;
        -:   64:		case 3:
     1061:   65:				gainCard(village,&G,1,who);
     1061:   66:				break;
        -:   67:		case 4:
     1054:   68:				gainCard(minion,&G,1,who);
     1054:   69:				break;
        -:   70:		case 5:
     1105:   71:				gainCard(mine,&G,1,who);
     1105:   72:				break;
        -:   73:		case 6:
     1113:   74:				gainCard(cutpurse,&G,1,who);
     1113:   75:				break;
        -:   76:		case 7:
     1080:   77:				gainCard(sea_hag,&G,1,who);
     1080:   78:				break;
        -:   79:		case 8:
     1080:   80:				gainCard(tribute,&G,1,who);
     1080:   81:				break;
        -:   82:		case 9:
     1101:   83:				gainCard(smithy,&G,1,who);
     1101:   84:				break;
        -:   85:		case 10:
     1089:   86:				gainCard(copper,&G,1,who);
     1089:   87:				break;
        -:   88:		case 11:
     1085:   89:				gainCard(silver,&G,1,who);
     1085:   90:				break;
        -:   91:		case 12:
     1080:   92:				gainCard(gold,&G,1,who);
     1080:   93:				break;
        -:   94:		
        -:   95:	}
        -:   96:	
        -:   97:}
       50:   98:shuffle(who,&G);//shuffling deck
        -:   99:
        -:  100:
        -:  101:
       50:  102:	 initial_handCount=G.handCount[0];
       50:  103:	 initial_deckCount=G.deckCount[0];
       50:  104:	 initial_discardCount=G.discardCount[0];
       50:  105:	 initial_numActions=G.numActions;
        -:  106:	 
       50:  107:	 if(cardEffect(village,0,0,0,&G,0,0) != 0){
        -:  108:		
    #####:  109:		testfail++;
    #####:  110:		continue;
        -:  111:	
        -:  112:	}
        -:  113:	 
        -:  114:	 //check number of actions increased
       50:  115:	 if((initial_numActions+2) != G.numActions){
    #####:  116:		 printf("Adding actions failed\n");
    #####:  117:		 addaction_fail++;
    #####:  118:		 testfail++;
    #####:  119:		 continue;
        -:  120:	 }
        -:  121:	 
        -:  122:	 //check numbers of cards in player hand
       50:  123:	 if(initial_handCount!=G.handCount[0] || (initial_discardCount)!=G.discardCount[0] ){
    #####:  124:		 printf("Adding and removing card from hand failed\n");
    #####:  125:		 testfail++;
    #####:  126:		 add_rm_card_fail++;
    #####:  127:		 continue;
        -:  128:	 }
        -:  129:	 
        -:  130:	 
       50:  131:	 testpass++;
        -:  132:	
        -:  133:}
        -:  134:	
        1:  135:	printf("Fails due to Actions:%d\n",addaction_fail);
        1:  136:	printf("Fails due Adding and removing card:%d\n",add_rm_card_fail);
        1:  137:	printf("Tests Passed:%d\n",testpass);
        1:  138:	printf("Tests Failed:%d\n",testfail);
        1:  139:	printf("Total Tests:%d\n",NUMTESTS);
        -:  140:	
        1:  141:	return 0;
        -:  142:}
