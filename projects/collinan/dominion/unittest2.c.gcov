        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9://testing updateCoins
function main called 1 returned 100% blocks executed 78%
        1:   10:int main(){
        -:   11:
        1:   12:	int player= 0;
        1:   13:	struct gameState* teststate = malloc(sizeof(struct gameState));
        -:   14:	int bonus;
        1:   15:	int i=0;
        1:   16:	int cardsInHand=0;
        1:   17:	int expectedTotal=0;
        -:   18:
        -:   19:
        -:   20:
        -:   21:
        -:   22:	//total 4
        1:   23:	cardsInHand=4;
        1:   24:	teststate->handCount[0]=cardsInHand; //4 cards
        1:   25:	teststate->coins=0;
        1:   26:	bonus =0;
        1:   27:	expectedTotal=4;
        5:   28:	for(i=0;i<cardsInHand;i++){	
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   29:		teststate->hand[player][i]=copper;
        -:   30:	}
        1:   31:	updateCoins(player, teststate,bonus);
call    0 returned 100%
        1:   32:	if(expectedTotal==teststate->coins){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   33:		printf( "TEST PASSED: Values matched");
call    0 returned 100%
        1:   34:			printf("Expected value: %d   updateCoins function return total: %d\n",expectedTotal,teststate->coins);
call    0 returned 100%
        -:   35:	}
        -:   36:
        -:   37:
        -:   38:
        -:   39:	//total is 8
        1:   40:	cardsInHand=4;
        1:   41:	teststate->handCount[0]=cardsInHand; //4 cards
        1:   42:	teststate->coins=0;
        1:   43:	bonus =0;
        1:   44:	expectedTotal=8;
        5:   45:	for(i=0;i<cardsInHand;i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   46:		teststate->hand[player][i]=silver;
        -:   47:	}
        1:   48:	if(expectedTotal==teststate->coins){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   49:		printf( "TEST PASSED: Values matched");
call    0 never executed
    #####:   50:			printf("Expected value: %d   updateCoins function return total: %d\n",expectedTotal,teststate->coins);
call    0 never executed
        -:   51:	}
        -:   52:
        -:   53:
        -:   54:	//total is 12
        1:   55:	cardsInHand=12;
        1:   56:	teststate->handCount[0]=cardsInHand; //4 cards
        1:   57:	teststate->coins=0;
        1:   58:	bonus =0;
        1:   59:	expectedTotal=4;
       13:   60:	for(i=0;i<cardsInHand;i++){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       12:   61:		teststate->hand[player][i]=gold;
        -:   62:	}
        1:   63:	if(expectedTotal==teststate){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   64:		printf( "TEST PASSED: Values matched");
call    0 never executed
    #####:   65:			printf("Expected value: %d   updateCoins function return total: %d\n",expectedTotal,teststate->coins);
call    0 never executed
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//total is 14
        1:   70:	cardsInHand=12;
        1:   71:	teststate->handCount[0]=cardsInHand; //4 cards
        1:   72:	teststate->coins=0;
        1:   73:	bonus =2;
        1:   74:	expectedTotal=4;
       13:   75:	for(i=0;i<cardsInHand;i++){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       12:   76:		teststate->hand[player][i]=gold;
        -:   77:	}
        1:   78:	if(expectedTotal==teststate->coins){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   79:		printf( "TEST PASSED: Values matched");
call    0 never executed
    #####:   80:			printf("Expected value: %d   updateCoins function return total: %d\n",expectedTotal,teststate->coins);
call    0 never executed
        -:   81:	}
        -:   82:
        -:   83:
        1:   84:	return 0;
        -:   85:}
        -:   86:
        -:   87:
