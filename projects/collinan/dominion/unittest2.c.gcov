        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9://testing updateCoins
function main called 1 returned 100% blocks executed 77%
        1:   10:int main(){
        -:   11:
        1:   12:	int player= 0;
        1:   13:	struct gameState* teststate = malloc(sizeof(struct gameState));
        -:   14:	int bonus;
        1:   15:	int i=0;
        1:   16:	int cardsInHand=0;
        1:   17:	int expectedTotal=0;
        -:   18:
        -:   19:
        -:   20:
        -:   21:
        -:   22:	//total 4
        1:   23:	cardsInHand=4;
        1:   24:	teststate->handCount[0]=cardsInHand; //4 cards
        1:   25:	teststate->coins=0;
        1:   26:	bonus =0;
        1:   27:	expectedTotal=4;
        5:   28:	for(i=0;i<cardsInHand;i++){	
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   29:		teststate->hand[player][i]=copper;
        -:   30:	}
        1:   31:	updateCoins(player, teststate,bonus);
call    0 returned 100%
        1:   32:	if(expectedTotal==teststate->coins){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   33:		printf( "TEST PASSED: Values matched");
call    0 returned 100%
        1:   34:			printf("Expected value: %d   updateCoins function return total: %d\n",expectedTotal,teststate->coins);
call    0 returned 100%
        -:   35:	}else{
    #####:   36:		printf( "TEST Failed: Values do not matched");
call    0 never executed
    #####:   37:		printf("Expected value: %d   updateCoins function return total: %d\n",expectedTotal,teststate->coins);
call    0 never executed
        -:   38:	}
        -:   39:
        -:   40:
        -:   41:
        -:   42:	//total is 8
        1:   43:	cardsInHand=4;
        1:   44:	teststate->handCount[0]=cardsInHand; //4 cards
        1:   45:	teststate->coins=0;
        1:   46:	bonus =0;
        1:   47:	expectedTotal=8;
        5:   48:	for(i=0;i<cardsInHand;i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   49:		teststate->hand[player][i]=silver;
        -:   50:	}
        1:   51:	if(expectedTotal==teststate->coins){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   52:		printf( "TEST PASSED: Values matched");
call    0 never executed
    #####:   53:			printf("Expected value: %d   updateCoins function return total: %d\n",expectedTotal,teststate->coins);
call    0 never executed
        -:   54:	}else{
        1:   55:		printf( "TEST Failed: Values do not matched");
call    0 returned 100%
        1:   56:		printf("Expected value: %d   updateCoins function return total: %d\n",expectedTotal,teststate->coins);
call    0 returned 100%
        -:   57:	}
        -:   58:
        -:   59:
        -:   60:	//total is 12
        1:   61:	cardsInHand=12;
        1:   62:	teststate->handCount[0]=cardsInHand; //4 cards
        1:   63:	teststate->coins=0;
        1:   64:	bonus =0;
        1:   65:	expectedTotal=4;
       13:   66:	for(i=0;i<cardsInHand;i++){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       12:   67:		teststate->hand[player][i]=gold;
        -:   68:	}
        1:   69:	if(expectedTotal==teststate->coins){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   70:		printf( "TEST PASSED: Values matched");
call    0 never executed
    #####:   71:			printf("Expected value: %d   updateCoins function return total: %d\n",expectedTotal,teststate->coins);
call    0 never executed
        -:   72:	}else{
        1:   73:		printf( "TEST Failed: Values do not matched");
call    0 returned 100%
        1:   74:		printf("Expected value: %d   updateCoins function return total: %d\n",expectedTotal,teststate->coins);
call    0 returned 100%
        -:   75:	}
        -:   76:
        -:   77:
        -:   78:	//total is 14
        1:   79:	cardsInHand=12;
        1:   80:	teststate->handCount[0]=cardsInHand; //4 cards
        1:   81:	teststate->coins=0;
        1:   82:	bonus =2;
        1:   83:	expectedTotal=4;
       13:   84:	for(i=0;i<cardsInHand;i++){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       12:   85:		teststate->hand[player][i]=gold;
        -:   86:	}
        1:   87:	if(expectedTotal==teststate->coins){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   88:		printf( "TEST PASSED: Values matched");
call    0 never executed
    #####:   89:			printf("Expected value: %d   updateCoins function return total: %d\n",expectedTotal,teststate->coins);
call    0 never executed
        -:   90:	}else{
        1:   91:		printf( "TEST Failed: Values do not matched");
call    0 returned 100%
        1:   92:		printf("Expected value: %d   updateCoins function return total: %d\n",expectedTotal,teststate->coins);
call    0 returned 100%
        -:   93:	}
        -:   94:
        1:   95:free(teststate);
        1:   96:	return 0;
        -:   97:}
        -:   98:
        -:   99:
